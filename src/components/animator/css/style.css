/**
 * OpenLayers map, controller and other animator components
 * are inserted inside animator element.
 *
 * Notice, animator uses relative dimensions.
 * Therefore, parent element should have some dimensions
 * in order to make animator also visible.
 */
.animator {
    position: relative;
    width: 100%;
    height: 100%;
    /* Prevent text selection. */
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: moz-none;
    -ms-user-select: none;
    user-select: none;
}

/**
 * Animator map and animation controls are inserted into this container.
 */
.animatorAnimation {
    position: absolute;
    width: 85%;
    height: 100%;
}

/**
 * Legend components are inserted into this container.
 */
.animatorLegend {
    position: absolute;
    right: 0;
    width: 15%;
    height: 100%;
    overflow: hidden;
}

/* Special case for no legend. */
.animatorAnimationNoLegend {
    /* Animation uses also legend area. */
    width: 100%;
    height: 100%
}
.animatorLegendNoLegend {
    /* Hide whole legend element. */
    display: none;
}

/**
 * Animator progressbar for load operations.
 */
.animatorLoadProgressbar {
    position: absolute;
    top: 40%;
    left: 30%;
    width: 40%;
    /* Use component default height. */
    z-index: 999999;
    /* Hide as default. */
    display: none;
}

.animatorLogo {
    position: absolute;
    right: 27px;
    bottom: 82px;
    width: 140px;
    height: 33px;
    background-image: url("img/fmi_logo.png");
    background-size: contain;
    background-repeat: no-repeat;
    background-position: right bottom;
    z-index: 9999999;
}
.animatorPlayAndPause {
    cursor: pointer;
    position: absolute;
    left: 27px;
    bottom: 27px;
    width: 55px;
    height: 55px;
    background-size: contain;
    background-repeat: no-repeat;
    background-position: left bottom;
    z-index: 9999999;
}
.animatorPlay {
    background-image: url("img/button-play.png");
}
.animatorPlay:hover {
    background-image: url("img/button-play-hover.png");
}
.animatorPause {
    background-image: url("img/button-pause.png");
}
.animatorPause:hover {
    background-image: url("img/button-pause-hover.png");
}

/**
 * Controller is located to the bottom of the animator.
 */
.animatorController {
    position: absolute;
    cursor: pointer;
    bottom: 0;
    /*
     * Notice, controller slider moves outside of the scale area. The area outside scale is 50px in each side.
     * Therefore, if map and controller width are set equal, the scale are is actually 2*50px less.
     * If map and scale side should be in equal positions, controller left should be -50px and its width 2*50px
     * greater than map. This way slider scale will be as wide as the map and the slider can overlap the container
     * border.
     */
    left: 27px;
    right: 27px;
    height: 70px;
    overflow: hidden;
}

/**
 * Map is located above controller and it fills the rest of the space vertically.
 */
.animatorMap {
    position: absolute;
    height: 100%;
    width: 100%;
    overflow: hidden;
}

/* Animator custom style cascade replacements for OpenLayers. */

/** Layer switcher. */

.animatorLayerSwitcher {
    position: absolute;
    top: 27px;
    /* Opens inside of the map to the left in the right side of the wrapping container. */
    right: 0;
    font-family: sans-serif;
    font-weight: bold;
    font-size: smaller;
    color: #000000;
    background: #ffffff;
    min-height: 96px;
}
.animatorLayerSwitcher .layersDiv {
    padding: 15px 55px 15px 15px;
}
.animatorLayerSwitcher .maximizeDiv {
    cursor: pointer;
    top: 0;
    right: 0;
    bottom: 0;
    width: 40px;
    background: #63b9e9;
}
.animatorLayerSwitcher .maximizeDiv:hover {
    background: #2486ce;
}
.animatorLayerSwitcher .minimizeDiv {
    cursor: pointer;
    top: 0;
    right: 0;
    bottom: 0;
    width: 40px;
    background: #63b9e9;
}
.animatorLayerSwitcher .minimizeDiv:hover {
    background: #2486ce;
}
.layersDiv .dataLbl {
    text-transform: uppercase;
    margin-bottom: 10px;
}
.dataLayersDiv {
    font-weight: normal;
}

/** Zoom control. */

div.olControlZoom .animatorControlZoomDisable, div.olControlZoom .animatorControlZoomDisable:hover {
    background: #d7edf9;
    cursor: default;
}

/* OpenLayers style cascade replacements. */

/** Zoom control. */

div.olControlZoom {
    top: 27px;
    left: 27px;
    border-radius: 0;
    padding: 0;
}
div.olControlZoom a {
    background: #63b9e9;
    color: #ffffff;
    font-size: 24px;
    padding: 8px;
    margin: 0;
    border-radius: 0;
}
.olControlZoomIn {
    border-bottom-color: #50a9e3;
    border-bottom-style: solid;
    border-bottom-width: 1px;
}
div.olControlZoom a:hover {
    background: #2486ce;
}
@media only screen and (max-width: 600px) {
    div.olControlZoom a:hover {
        background: #2486ce;
    }
    div.olControlZoom .animatorControlZoomDisable, div.olControlZoom .animatorControlZoomDisable:hover {
        background: #d7edf9;
    }
}

/* Animator legend styles. */

/**
 * Marks selected item.
 */
.selectedLegend {
    border-color: silver;
    border-width: 2px;
}

/**
 * Legend components below are inserted into this container.
 */
.animatorLegendThumbnails {
    position: absolute;
    bottom: 0;
    width: 100%;
    overflow: hidden;
}

/**
 * Selected legend as a big view.
 */
.animatorLegendView {
    position: absolute;
    top: 0;
    bottom: 162px;
    width: 100%;
    background-position: left center;
    background-repeat: no-repeat;
    background-size: contain;
}

/* In case of only one legend, only legend view is shown. */
.animatorLegendViewOne {
    /* Height from top to bottom. */
    bottom: 0;
    background-position: left center;
}
.animatorLegendThumbnailsNone {
    /* Thumbnails related elements are hidden. */
    display: none;
}

/*
 * Animator legends thumbnails are inserted into scroll-pane.
 * See: http://jqueryui.com/slider/#side-scroll
 */

.scroll-pane {
    overflow: auto;
    /* Make sure right borders are not cut and hidden. */
    width: 98%;
    float: left;
}
.scroll-content {
    /*
     * Width is updated dynamically in JavaScript when content is added.
     * Then, one line is always used. Otherwise, float would wrap to new line
     * when content exceeds the width.
     */
    float: left;
}
.scroll-content-item {
    cursor: pointer;
    width: 100px;
    height: 100px;
    float: left;
    margin: 10px;
    font-size: 3em;
    line-height: 96px;
    text-align: center;
    background-position: center;
    background-repeat: no-repeat;
    background-size: contain;
}
.scroll-bar-wrap {
    clear: left;
    padding: 0 4px 0 2px;
    margin: 0 -1px -1px -1px;
}
.scroll-bar-wrap .ui-slider {
    background: none;
    border: 0;
    height: 2em;
    margin: 0 auto;
}
.scroll-bar-wrap .ui-handle-helper-parent {
    position: relative;
    width: 100%;
    height: 100%;
    margin: 0 auto;
}
.scroll-bar-wrap .ui-slider-handle {
    top: .2em;
    height: 1.5em;
}
.scroll-bar-wrap .ui-slider-handle .ui-icon {
    margin: -8px auto 0;
    position: relative;
    top: 50%;
}
